# -*- coding: utf-8 -*-
"""Diabetes Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13dVBc793JKZKlmU63NJ8UnlfdK6H5D1A
"""

# importing liberaries
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

# Data Analysis

data_set=pd.read_csv('diabetes.csv')

# showing the data using the head()
data_set.head()

pd.read_csv?

# Finding the row and column of the data
data_set.shape

data_set.describe()

data_set['Outcome'].value_counts()

# Getting info for the indiviual values of the labels
data_set.groupby('Outcome').mean()

# Separating the data and the labels

X=data_set.drop(columns='Outcome',axis=1)
Y=data_set['Outcome']

# printing the data and the labels
print(X)

# Printing the labels
print(Y)

# standardization of the data
scaler=StandardScaler()

scaler.fit(X)

Standardized_data=scaler.transform(X)

# printing the standardized data
print(Standardized_data)

X=Standardized_data
Y=data_set["Outcome"]

print(X)

print(Y)

# splitting the data into the train and test data
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

# Training the model

classifier=svm.SVC(kernel='linear')

classifier.fit(X_train,Y_train)

# Model Evaluation on training data

train_prediction=classifier.predict(X_train)

# Now finding the accuracy

accuracy=accuracy_score(prediction,Y_train)

# Printing the accuracy of the model

print("The accuracy of the model is ",accuracy)

# Model Evaluation on testing data
test_prediction=classifier.predict(X_test)

# Finding the accuracy
test_accuracy=accuracy_score(test_prediction,Y_test)

print("The accuracy on test data is ", test_accuracy)

# Making some predicting system

input_data = (5,166,72,19,175,25.8,0.587,51)

input_array=np.asarray(input_data)
input_array_reshaped=input_array.reshape(1,-1)
std_data=scaler.transform(input_array_reshaped)
#print(std_data)

prediction_answer=classifier.predict(std_data)
print('The prediction is ',prediction_answer,'\n')

if prediction_answer==0:
    print("The person is not diabetic")
else:
    print("The person is diabetic patient\n\n")

